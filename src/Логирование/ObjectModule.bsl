
#Область ПрограммныйИнтерфейс

#Область УстановкаНастроек

// Инициализирует объект логирования с указанными настройками.
// Параметры
//     ИмяСобытия         - Строка - имя события/лога.
//     СпособыЛогирования - Массив, Неопределено - список способов логирования (способ описывается структурой), если не задано используется логирование в ЖР.
Процедура Инициализировать(ИмяСобытия="Логирование")
	
	//TODO (Цымбал): возможность настройки уровня логирования.
	//TODO (Цымбал): возможность отключения логирования.
	//TODO (Цымбал): возможность установки шаблона лога.
	//TODO (Цымбал): поля шаблона лога.
	//TODO (Цымбал): возможность установки формата даты для лога.
	//TODO (Цымбал): реализовать возможность привязывать лог в ЖР к метаданным и объекту.
	
	ЭтотОбъект.СпособыЛогирования = Новый Массив;
	ЭтотОбъект.Событие            = ИмяСобытия;
	
КонецПроцедуры

// Устанавливает имя события/лога и возвращает объект обработки.
Функция ПолучитьЛог(ИмяСобытия) Экспорт
	Инициализировать(ИмяСобытия);
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает событие логирования.
Процедура УстановитьСобытие(ИмяСобытия) Экспорт
	ЭтотОбъект.Событие = ИмяСобытия;
КонецПроцедуры

// Формирует структуру с описанием способа логирования
// Параметры
//     СпособЛогирования  - Строка - название способа вывода: ЖурналРегистрации, Консоль, Файл.
//     УровеньЛогирования - Строка - пока не используется.
//     ШаблонСообщения    - Строка - строка шаблона сообщения. Допустимые ключевые слова:
//       * %ДАТА%      - дата сообщения в формате указанном в ФорматДаты.
//       * %СООБЩЕНИЕ% - текст выводимого сообщения
//       * %УРОВЕНЬ%   - название уровня сообщения: ИНФОРМАЦИЯ, ОШИБКА и т.д..
//     ФорматДаты         - Строка - строка с форматом даты в сообщении лога.
//     ПутьКФайлуЛогов    - Строка - пока не используется.
// 
// Возвращаемое значение:
//     Структура - структура с описанием способа логирования, в которой есть следующие поля:
//       * Имя             - Строка - имя способа логирования: ЖурналРегистрации, Консоль, Файл.
//       * Уровень         - Строка - имя уровня логирования.
//       * ШаблонСообщения - Строка - строка с описание шаблона сообщения лога.
//       * ФорматДаты      - Строка - строка с форматом даты используемой в шаблоне сообщения (%ДАТА%).
//       * ИмяФайла        - Строка - имя файла лога, задается только для логирования в файл.
Функция ПолучитьОписаниеСпособаЛогирования(Знач СпособЛогирования, 
										   Знач УровеньЛогирования=Неопределено, 
										   Знач ШаблонСообщения="%СООБЩЕНИЕ%", 
										   Знач ФорматДаты="ДФ='yyyy-MM-dd HH:mm:ss'", 
										   Знач ПутьКФайлуЛогов="") Экспорт
										   
	Описание = Новый Структура;
	Описание.Вставить("Имя",             СпособЛогирования); 
	Описание.Вставить("Уровень",         УровеньЛогирования);
	Описание.Вставить("ШаблонСообщения", ШаблонСообщения); 
	Описание.Вставить("ФорматДаты",      ФорматДаты);
	Описание.Вставить("ИмяФайла",        ПутьКФайлуЛогов);
										   
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьСпособЛогированияЖурналРегистрации(Знач ШаблонСообщения="", Знач ФорматДаты="") Экспорт
	
	//TODO (Цымбал): переделать на использование табличной части для хранения способов логирования.
	
	ШаблонСообщения = ?(ЗначениеЗаполнено(ШаблонСообщения), ШаблонСообщения, ШаблонПоУмолчаниюЖурналРегистрации());
	ФорматДаты      = ?(ЗначениеЗаполнено(ФорматДаты), ФорматДаты, ФорматДатыПоУмолчанию());
	
	// Проверить наличие способа логирования.
	Для Каждого СпособЛогирования Из ЭтотОбъект.СпособыЛогирования Цикл
		Если ВРег(СпособЛогирования.Имя) = ВРег("ЖурналРегистрации") Тогда
			СпособЛогирования.ШаблонСообщения = ШаблонСообщения;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление способа логирования.
	ОписаниеСпособаЛогирования = ПолучитьОписаниеСпособаЛогирования("ЖурналРегистрации", , ШаблонСообщения, ФорматДаты);
	ЭтотОбъект.СпособыЛогирования.Добавить(ОписаниеСпособаЛогирования);
	
КонецПроцедуры

Процедура ДобавитьСпособЛогированияКонсоль(Знач ШаблонСообщения="", Знач ФорматДаты="") Экспорт
	
	//TODO (Цымбал): переделать на использование табличной части для хранения способов логирования.
	
	ШаблонСообщения = ?(ЗначениеЗаполнено(ШаблонСообщения), ШаблонСообщения, ШаблонПоУмолчаниюКонсоль());
	ФорматДаты      = ?(ЗначениеЗаполнено(ФорматДаты), ФорматДаты, ФорматДатыПоУмолчанию());
	
	// Проверить наличие способа логирования.
	Для Каждого СпособЛогирования Из ЭтотОбъект.СпособыЛогирования Цикл
		Если ВРег(СпособЛогирования.Имя) = ВРег("Консоль") Тогда
			СпособЛогирования.ШаблонСообщения = ШаблонСообщения;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление способа логирования.
	ОписаниеСпособаЛогирования = ПолучитьОписаниеСпособаЛогирования("Консоль", , ШаблонСообщения, ФорматДаты);
	ЭтотОбъект.СпособыЛогирования.Добавить(ОписаниеСпособаЛогирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОсновныеМетоды

Процедура Отладка(Знач Сообщение) Экспорт
	
КонецПроцедуры

Процедура Информация(Знач Сообщение) Экспорт
	
	Если Ложь Тогда
		
	Иначе
		ВызватьИсключение СтрШаблон("Установлен неизвестный способ логирования: %1", ЭтотОбъект.СпособыЛогирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура Инфо(Знач Сообщение)  Экспорт
	ЭтотОбъект.Информация(Сообщение);
КонецПроцедуры

Процедура Предупреждение_(Знач Сообщение) Экспорт
	
КонецПроцедуры

Процедура Предупредить(Знач Сообщение) Экспорт
	Предупреждение_(Сообщение);
КонецПроцедуры

Процедура Ошибка(Знач Сообщение) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Процедура ОтладкаЖурналРегистрации(Знач Сообщение)
	ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Информация);
КонецПроцедуры

Процедура ИнформацияЖурналРегистрации(Знач Сообщение)
	ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Информация);
КонецПроцедуры

Процедура ПредупреждениеЖурналРегистрации(Знач Сообщение)
	ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Предупреждение);
КонецПроцедуры

Процедура ОшибкаЖурналРегистрации(Знач Сообщение)
	ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
КонецПроцедуры

Процедура ЗаписатьВЖурналРегистрации(Знач Сообщение, Знач УровеньЖР=Неопределено)
	
	УровеньЖР = ?(УровеньЖР = Неопределено, УровеньЖурналаРегистрации.Информация, УровеньЖР);
	
	ЗаписьЖурналаРегистрации(ЭтотОбъект.Событие, УровеньЖР, , , Сообщение);
	
	//Если ЗначениеЗаполнено(ОбъектМетаданныхЖР) Тогда
	//	ЗаписьЖурналаРегистрации(ЭтотОбъект.Событие, УровеньЖР, ОбъектМетаданныхЖР, ДанныеЖР, Сообщение);
	//Иначе
	//	
	//КонецЕсли;
	
КонецПроцедуры

Функция ШаблонПоУмолчаниюЖурналРегистрации() 
	Возврат "%СООБЩЕНИЕ%";
КонецФункции

#КонецОбласти

#Область ЗаписьВКонсоль

Функция ШаблонПоУмолчаниюКонсоль()
	Возврат "%ДАТА% - %УРОВЕНЬ% - %СООБЩЕНИЕ%";
КонецФункции

#КонецОбласти

#Область ЗаписьВФайл



#КонецОбласти

#Область ЗаписьВРегистр

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

Функция Инициализирован()
	Возврат Инициализирован;
КонецФункции

Функция СформироватьСообщениеПоШаблону(Знач Сообщение, Знач Уровень, Знач ДатаСообщения) 
	
	
	
	
КонецФункции

Функция ШаблонСообщенияПоУмолчанию()
	Возврат "%ДАТА% - %УРОВЕНЬ% - %СООБЩЕНИЕ%";
КонецФункции

Функция ФорматДатыПоУмолчанию()
	Возврат "ДФ='dd.MM.yyyy HH:mm:ss'";
КонецФункции

#КонецОбласти